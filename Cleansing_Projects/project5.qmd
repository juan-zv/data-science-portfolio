---
title: "Client Report - The war with the Star Wars"
subtitle: "Course DS 250"
author: "Juan Zurita"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
```


## Elevator pitch

_It is really interesting to build a machine learning model which can predict if a person makes more or less than $ 50K using data provided from a survey about Star Wars. Yes, a sruvey about Star Wars could technically predict this. This is really interesting, and I think really cool to try at least._

```{python}
#| label: project-data
#| code-summary: Read and format project data

df = pd.read_csv('https://github.com/fivethirtyeight/data/raw/master/star-wars-survey/StarWars.csv', encoding='ISO-8859-1')

```


## QUESTION|TASK 1

__Shorten the column names and clean them up for easier use with pandas. Provide a table or list that exemplifies how you fixed the names.__

```{python}
#| label: Q1

column_mapping = {
    'RespondentID': 'RespondentID',
    'Have you seen any of the 6 films in the Star Wars franchise?': 'SeenAnyFilm',
    'Do you consider yourself to be a fan of the Star Wars film franchise?': 'FanOfFranchise',
    'Which of the following Star Wars films have you seen? Please select all that apply.': 'SeenFilm1',
    'Unnamed: 4': 'SeenFilm2',
    'Unnamed: 5': 'SeenFilm3',
    'Unnamed: 6': 'SeenFilm4',
    'Unnamed: 7': 'SeenFilm5',
    'Unnamed: 8': 'SeenFilm6',
    'Please rank the Star Wars films in order of preference with 1 being your favorite film in the franchise and 6 being your least favorite film.': 'RankFilm1',
    'Unnamed: 10': 'RankFilm2',
    'Unnamed: 11': 'RankFilm3',
    'Unnamed: 12': 'RankFilm4',
    'Unnamed: 13': 'RankFilm5',
    'Unnamed: 14': 'RankFilm6',
    'Please state whether you view the following characters favorably, unfavorably, or are unfamiliar with him/her.': 'HanSoloOpinion',
    'Unnamed: 16': 'LukeSkywalkerOpinion',
    'Unnamed: 17': 'PrincessLeiaOrganaOpinion',
    'Unnamed: 18': 'AnakinSkywalkerOpinion',
    'Unnamed: 19': 'ObiWanKenobiOpinion',
    'Unnamed: 20': 'EmperorPalpatineOpinion',
    'Unnamed: 21': 'DarthVaderOpinion',
    'Unnamed: 22': 'LandoCalrissianOpinion',
    'Unnamed: 23': 'BobaFettOpinion',
    'Unnamed: 24': 'C-3P0Opinion',
    'Unnamed: 25': 'R2D2Opinion',
    'Unnamed: 26': 'JarJarBinksOpinion',
    'Unnamed: 27': 'PadmeAmidalaOpinion',
    'Unnamed: 28': 'YodaOpinion',
    'Which character shot first?': 'WhoShotFirst',
    'Are you familiar with the Expanded Universe?': 'KnowsExpandedUniverse',
    'Do you consider yourself to be a fan of the Expanded Universe?æ': 'FanOfExpandedUniverse',
    'Do you consider yourself to be a fan of the Star Trek franchise?': 'FanOfStarTrek',
    'Household Income': 'Income',
    'Location (Census Region)': 'Location'
}

df_cleaned = df.rename(columns=column_mapping)

df_cleaned.columns

```



## QUESTION|TASK 2

__Clean and format the data so that it can be used in a machine learning model. As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made__ 

__Filter the dataset to respondents that have seen at least one film.__

```{python}
#| label: Q2a

df_filtered = df_cleaned.query('SeenAnyFilm == "Yes"')

df_filtered.head()

```

__Create a new column that converts the age ranges to a single number. Drop the age range categorical column.__

```{python}
#| label: Q2b

age_mapping = {
    '18-29': 1,
    '30-44': 2,
    '45-60': 3,
    '> 60': 4
}
df_filtered['AgeGroup'] = df_filtered['Age'].map(age_mapping)
df_filtered = df_filtered.drop(columns=['Age'])

df_filtered.columns

```

__Create a new column that converts the education groupings to a single number. Drop the school categorical column__

```{python}
#| label: Q2c

education_mapping = {
    'Less than high school degree': 1,
    'High school degree': 2,
    'Some college or Associate degree': 3,
    'Bachelor degree': 4,
    'Graduate degree': 5
}
df_filtered['EducationGroup'] = df_filtered['Education'].map(education_mapping)
df_filtered = df_filtered.drop(columns=['Education'])

df_filtered.columns

```

__Create a new column that converts the income ranges to a single number. Drop the income range categorical column.__

```{python}
#| label: Q2d

income_mapping = {
    '$0 - $24,999': 1,
    '$25,000 - $49,999': 2,
    '$50,000 - $99,999': 3,
    '$100,000 - $149,999': 4,
    '$150,000+': 5
}
df_filtered['IncomeGroup'] = df_filtered['Income'].map(income_mapping)
df_filtered = df_filtered.drop(columns=['Income'])

df_filtered.columns

```

__Create your target (also known as “y” or “label”) column based on the new income range column.__

```{python}
#| label: Q2e

df_filtered['Target'] = (df_filtered['IncomeGroup'] > 2)

df_filtered.columns

df_filtered.head()

```

__One-hot encode all remaining categorical columns.__

```{python}
#| label: Q2f Get Dummies

df_filtered_ohe = pd.get_dummies(df_filtered)
df_filtered_ohe.columns.tolist()

```


## QUESTION|TASK 3

__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__

```{python}
#| label: Q3

#SeenFilm
HasSeenMoviesPercent = [round(df_filtered['SeenFilm1'].count() / 835, 2) * 100, 
                        round(df_filtered['SeenFilm2'].count() / 835, 2) * 100, 
                        round(df_filtered['SeenFilm3'].count() / 835, 2) * 100, 
                        round(df_filtered['SeenFilm4'].count() / 835, 2) * 100, 
                        round(df_filtered['SeenFilm5'].count() / 835, 2) * 100, 
                        round(df_filtered['SeenFilm6'].count() / 835, 2) * 100]

fig_1 = px.bar(x=HasSeenMoviesPercent,
               y=['Star Wars: Episode I The Phantom Menace',
                'Star Wars: Episode II Attack of the Clone',
                'Star Wars: Episode III Revenge of the Sith',
                'Star Wars: Episode IV A New Hope',
                'Star Wars: Episode V The Empire Strikes Back',
                'Star Wars: Episode VI Return of the Jedi'],
                  text=HasSeenMoviesPercent,
                  title="Which 'Star Wars' Movies Have You Seen? (Of 835 respondents)",
               )
fig_1.show()


# WhoShotFirst
hanShotFirst = [round(df_filtered_ohe['WhoShotFirst_Han'].sum() / 834, 2) * 100,
                round(df_filtered_ohe['WhoShotFirst_Greedo'].sum() / 834, 2) * 100,
                round(df_filtered_ohe["WhoShotFirst_I don't understand this question"].sum() / 834, 2) * 100]

fig_2 = px.bar(x=hanShotFirst, 
               y=['Han', 'Greedo', 'I dont understand this question'],
               title="Who Shot First? (According to 834 respondents)",
               text=hanShotFirst)

fig_2.show()

```



## QUESTION|TASK 4

__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__

_I used a DTC and a RFC to try to predict if a person taking the survey earns more than $50K. Unfortunately, the accuracy scores were not high enough to confirm that any of the model can predict this information. The accuracy score for the DTC is 0.60 or 60%, and the score for the RTC is 0.59 or 59%. These scores show that the models can predict right only that percentage of cases. Even though it is more than 50% and someone could say it can work, I also came to the conclusion that the data provided is not sufficently related with the income._

```{python}
#| label: Q4

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

features = df_filtered_ohe.columns

features = features.drop('Target')
features = features.drop('IncomeGroup')

X = df_filtered_ohe[features]
y = df_filtered_ohe['Target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Decision Tree Classifier
dt_classifier = DecisionTreeClassifier()

dt_classifier = dt_classifier.fit(X_train, y_train)

y_pred = dt_classifier.predict(X_test)

dt_classifier_accuracy = accuracy_score(y_test, y_pred)

# Random Forest Classifier
rf_classifier = RandomForestClassifier()

rf_classifier.fit(X_train, y_train)

y_pred_rf = rf_classifier.predict(X_test)

rf_classifier_accuracy = accuracy_score(y_test, y_pred_rf)

(dt_classifier_accuracy, rf_classifier_accuracy)

```
