---
title: "Client Report - Finding relationships in baseball"
subtitle: "Course DS 250"
author: "Juan Zurita"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import sqlite3
```

```{python}

#Establish connection with database
sqlite_file = r'lahmansbaseballdb.sqlite'

con = sqlite3.connect(sqlite_file)

q = '''
    SELECT * 
    FROM sqlite_master 
    WHERE type='table'
    '''
    
table = pd.read_sql_query(q,con)
table.filter(['name'])

```

## Elevator pitch

__Analyzing the "lahmansbaseball.db.sqlite" database using SQLite and Python's sqlite3 library provides valuable insights into various aspects of baseball, including team performance, player statistics, and league dynamics. By querying the database, we can uncover trends in team standings over multiple seasons, track individual player performances, and assess the overall competitiveness of different leagues. Visualizing the data can help in understanding patterns such as batting averages, home run frequencies, and pitching statistics, allowing analysts and enthusiasts to gain deeper insights into the sport's dynamics and evolution over time. Additionally, exploring relationships between player demographics, team strategies, and game outcomes can offer valuable insights for teams, coaches, and fans alike.__


## QUESTION|TASK 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__

_This table shows information for players with school ID as idbyuid and their salary with the year and the team they were playing for. _

```{python}
#| label: Q1
#| code-summary: Read and format data

q1 = '''
    SELECT DISTINCT p.playerID, s.schoolID, sa.salary, sa.yearID, sa.teamID
    FROM people AS p
    INNER JOIN collegeplaying AS c ON p.playerID = c.playerID
    INNER JOIN schools AS s ON c.schoolID = s.schoolID
    INNER JOIN salaries AS sa ON p.playerID = sa.playerID
    WHERE s.schoolID = 'idbyuid'
    ORDER BY sa.salary DESC;
    '''
    
question_1 = pd.read_sql_query(q1,con)
    
question_1


```


## QUESTION|TASK 2

__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__


__Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__

```{python}
#| label: Q2a
#| code-summary: Read and format data

q2a = '''
   SELECT playerID, yearID, 
   ROUND(CAST(SUM(H) AS FLOAT) / NULLIF(SUM(AB), 0), 3) AS batting_average
    FROM batting
    WHERE AB > 0
    GROUP BY playerID, yearID
    ORDER BY batting_average DESC
    LIMIT 5;
    '''
question_2a = pd.read_sql_query(q2a,con)
    
question_2a


```

__Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.__

```{python}
#| label: Q2b
#| code-summary: Read and format data

q2b = '''
    SELECT playerID, yearID, 
       ROUND(CAST(SUM(H) AS FLOAT) / NULLIF(SUM(AB), 0), 3) AS batting_average
    FROM batting
    WHERE AB >= 10  
    GROUP BY playerID, yearID
    ORDER BY batting_average DESC, playerID
    LIMIT 5;
'''
question_2b = pd.read_sql_query(q2b,con)
    
question_2b


```

__Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.__

```{python}
#| label: Q2c
#| code-summary: Read and format data

q2c = '''
    SELECT playerID, 
       ROUND(CAST(SUM(H) AS FLOAT) / NULLIF(SUM(AB), 0), 3) AS career_batting_average
    FROM batting
    GROUP BY playerID
    HAVING SUM(AB) >= 100  
    ORDER BY career_batting_average DESC
    LIMIT 5;
'''
question_2c = pd.read_sql_query(q2c,con)
    
question_2c


```


## QUESTION|TASK 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?__

_For this question I chose the Seattle Mariners and the Boston Reds to compare their team's total salary. I see that the total salary from the Boston Reds is higher than the Mariners which makes me think they are better paid, making any baseball player to aim to play for that team. I also think about each city's economy over time and in general which may also explain why Boston players would have to be paid more than Seattle ones._

```{python}
#| label: Q3
#| code-summary: Read and format data

q3 = '''
    SELECT teamID, SUM(salary) AS salary
    FROM salaries
    WHERE teamID IN ('SEA', 'BOS')
    GROUP BY teamID;
'''

question_3 = pd.read_sql_query(q3,con)
    
question_3


visual = px.bar(question_3, x='teamID', y='salary', title='Salaries Comparison',
             labels={'teamID': 'Team', 'salary': 'Team Total Salary'})

visual.show()

```